{% include 'primegenerator.jinja' %}
{% block content %} 

<script src="https://cdn.jsdelivr.net/npm/crypto-js@3.1.9-1/crypto-js.js"></script>
<script src="https://peterolson.github.io/BigInteger.js/BigInteger.min.js"></script>

<script>
    function custom_parseInt(hash) {
        var seed = "";
        for(let i = 0; i < hash.length; i++){
            let number = parseInt(hash.charAt(i), 16);
            seed += parseInt(hash.charAt(i), 16).toString();
        }
        return bigInt(seed);
    }

    let received_messages = [];
    let known_keys = {};
    let connected_user = null;

    let g = bigInt(1231);
    let p = get_prime();
    let secret = custom_parseInt(sessionStorage.getItem("key"));

    async function encrypt(message,key) {
        const messageBuffer = new TextEncoder().encode(message);
        let iv = crypto.getRandomValues(new Uint8Array(12));

        const algorithm = { name: 'AES-GCM', iv: iv };
        
        let ivString = Array.from(iv).join(',');

        const keyObject = await crypto.subtle.importKey('raw', key, algorithm, false, ['encrypt']);
        let encryptedMessage = await crypto.subtle.encrypt(algorithm, keyObject, messageBuffer);
        
        let encryptedMessageString = Array.from(new Uint8Array(encryptedMessage)).join(',');

        let IVencryptedMessage = ivString + ";" + encryptedMessageString;
        return IVencryptedMessage;
    }

    async function decrypt(encryptedMessage,key) {
            encryptedMessage = encryptedMessage + "";
            let indexOfIV = encryptedMessage.indexOf(";");

            const IV = encryptedMessage.substring(0, indexOfIV).trim();
            let encryptedMessageOnly = encryptedMessage.substring(indexOfIV + 1).trim();

            const ivArray = IV.split(',').map(Number);
            const extractedIV = new Uint8Array(ivArray);

            const algorithm = { name: 'AES-GCM', iv: extractedIV };

            const encryptedMessageBuffer = Uint8Array.from(encryptedMessageOnly.split(',').map(Number)).buffer;

            const keyObject = await crypto.subtle.importKey("raw", key, { name: "AES-GCM" }, true, ["encrypt", "decrypt"])
            const decryptedData = await crypto.subtle.decrypt(algorithm, keyObject, encryptedMessageBuffer);

            const decryptionResult = new TextDecoder().decode(decryptedData);
            return decryptionResult;

    }

    function modularPow(base, exponent, modulus) {
        var outcome = base.modPow(exponent,modulus);
        return outcome;
    }

    function check_existing_key(user_name) {
        return (user_name in known_keys);
    }

 function craft_key_exchange_communication(content, sequence_num) {
        return JSON.stringify({
            type: "key_exchange",
            content: content,
            sequence_num: sequence_num
        });
    }

    async function craft_message_communication(message) {
        let hash_mac = await calc_hmac(message, connected_user);
        let data = await encrypt(message,known_keys[connected_user]);

        var new_message = JSON.stringify({
            type: "ciphertext",
            content: data,
            sequence_num: null,
            hmac: hash_mac
        });
        return new_message;
    }

    async function calc_hmac(message) {
        shared_key = known_keys[connected_user];
        let result = message.concat(shared_key);
        hmac = await sha256(result);
        return hmac;
    }

    async function receiver(message) { //Accepts all the key-exchange relevent messages. 
        let message_obj = JSON.parse(message);
        message_obj['message'] = JSON.parse(message_obj['message']);

        if (message_obj["sender"] == connected_user && message_obj["message"]["type"] == "ciphertext") {

            let decrypted_message = await decrypt(message_obj["message"]['content'],known_keys[connected_user]);
            let hmac_two = await calc_hmac(decrypted_message); 
            if (hmac_two == message_obj['message']['hmac']) {
                append_message_content(decrypted_message,message_obj["sender"]);
            } else {
                console.log("ERROR NON MATCHING HMAC");
                console.log(hmac_two,JSON.stringify(message_obj));
            }

        } else if (message_obj["message"]["type"] == "key_exchange") {
            if (message_obj['message']['sequence_num'] == 0) {
                respond_key_exchange(message_obj["sender"]); //If this is the first messages recieved to init a key exchange, it goes straight to the respond to exchange funcion
            } else {
                received_messages.push(message_obj);
            }           
        }
    }

    async function init_connection(reciever_user_name) {
        if (!(check_existing_key(reciever_user_name))) {
            await init_key_exchange(reciever_user_name);
        }
        if (check_existing_key(reciever_user_name)) {
            connected_user = reciever_user_name;
        }
    }
</script>

<script>
    function get_recieved_message(expected_sequence_num,sender) {
        let found_message;
        for (var x = 0; x < received_messages.length; x++) {
            if (received_messages[x]['sender'] == sender) {
                if (received_messages[x]['message']['sequence_num'] == expected_sequence_num) {
                    found_message = received_messages[x]['message'];
                    received_messages.splice(x, 1);
                    return found_message;
                }
            }
        }
        return null;
    }

    async function check_responce_timeout(sequence_num,recipient) {
        recieved_message = null; 
        for (let x = 0; x < 5; x++) {
            recieved_message = get_recieved_message(sequence_num,recipient);
            if (!(recieved_message == null)) {
                break;
            }
            await new Promise(resolve => setTimeout(resolve, 500));
        }
        return recieved_message; 
    }

    async function init_key_exchange(recipient) {
        var public_value = await modularPow(g,secret,p);
        let recieved_message = null; 
        
        let sequence_num = 0; 
        relay(craft_key_exchange_communication("",sequence_num),recipient);
        
        sequence_num += 1; 
        await check_responce_timeout(sequence_num,recipient);

        sequence_num += 1; 
        relay(craft_key_exchange_communication(public_value,sequence_num),recipient);
        sequence_num += 1; 
        recieved_message = await check_responce_timeout(sequence_num,recipient);
        if (!(recieved_message == null)){
            known_keys[recipient] = await pure_sha256(modularPow(bigInt(recieved_message['content']),secret,p));
            console.log("shared key established:",known_keys[recipient]);
        }
    }

    async function respond_key_exchange(sender) {
        var public_value = modularPow(g,secret,p);
        let recieved_message = null; 

        let sequence_num = 1;
        relay(craft_key_exchange_communication("",sequence_num),sender);

        sequence_num += 1; 
        recieved_message = await check_responce_timeout(sequence_num,sender);

        sequence_num += 1; 
        relay(craft_key_exchange_communication(public_value,sequence_num),sender);

        known_keys[sender] = await pure_sha256(modularPow(bigInt(recieved_message['content']),secret,p));
        console.log("shared key established:",known_keys[sender]);
    }
</script>

{% endblock %}